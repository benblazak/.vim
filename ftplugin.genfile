" vim: filetype=vim

" ----------------------------------------------------------------------------
" all non-comment lines should be preceded by "[filetype list]\s*++\s*"
" ----------------------------------------------------------------------------


"indent
lsp lisp htm html xhtml xml scheme	++ setlocal noexpandtab shiftwidth=2 tabstop=2 softtabstop=2
fortran rst							++ setlocal expandtab   shiftwidth=3 tabstop=3 softtabstop=3
c cpp h								++ setlocal noexpandtab shiftwidth=8 tabstop=8 softtabstop=8
python perl java css vim ada php	++ setlocal noexpandtab shiftwidth=4 tabstop=4 softtabstop=4
haskell remind						++ setlocal expandtab	shiftwidth=4 tabstop=4 softtabstop=4

"display & folding
text        ++ setlocal linebreak
java        ++ setlocal include=^#\s*import
java        ++ setlocal includeexpr=substitute(v:fname,'\\.','/','g')
java python ++ setlocal foldmethod=indent
remind		++ setlocal comments^=:;
remind		++ syn match remindComment ";.*$"

"movement
text ++ nnoremap j gj
text ++ nnoremap k gk
text ++ vnoremap j gj
text ++ vnoremap k gk
text ++ nnoremap <Down> gj
text ++ nnoremap <Up> gk
text ++ vnoremap <Down> gj
text ++ vnoremap <Up> gk
text ++ inoremap <Down> <C-o>gj
text ++ inoremap <Up> <C-o>gk

"macros
	"(un)comment code
c cpp java	++ map <c-c>   :call<space>Comment('// ', '')<cr>
c cpp java	++ map <c-u> :call<space>UnComment('// ', '')<cr>
css php		++ map <c-c>   :call<space>Comment('/\* ', ' \*/')<cr>
css php		++ map <c-u> :call<space>UnComment('/\* ', ' \*/')<cr>
vim			++ map <c-c>   :call<space>Comment('" ', '')<cr>
vim			++ map <c-u> :call<space>UnComment('" ', '')<cr>
fortran		++ map <c-c>   :call<space>Comment('c', '')<cr>
fortran		++ map <c-u> :call<space>UnComment('c', '')<cr>
ada haskell	++ map <c-c>   :call<space>Comment('-- ', '')<cr>
ada haskell	++ map <c-u> :call<space>UnComment('-- ', '')<cr>
rst			++ map <c-c>   :call<space>Comment('.. # ', '')<cr>
rst			++ map <c-u> :call<space>UnComment('.. # ', '')<cr>
lsp lisp scheme remind	++ map <c-c>   :call<space>Comment('; ', '')<cr>
lsp lisp scheme remind	++ map <c-u> :call<space>UnComment('; ', '')<cr>
python perl sh make		++ map <c-c>   :call<space>Comment('# ', '')<cr>
python perl sh make		++ map <c-u> :call<space>UnComment('# ', '')<cr>
htm html xhtml xml		++ map <c-c>   :call<space>Comment('<!-- ', ' -->')<cr>
htm html xhtml xml		++ map <c-u> :call<space>UnComment('<!-- ', ' -->')<cr>
	"generate code
		"@t = to help test functions
		"@p = function prototypes (position cursor at bottom of file)
		"@g = get functions (very basic..)
lsp lisp ++ let @t="0v$hyi(format t \"~A~%~A~%\" \"\<esc>pa\" \<esc>A)\<esc>j"
c cpp 	++ let @p="[[kVy1GPA;\<esc>\<c-o>"
java	++ let @g="$F F lvf hy}Opublic \<esc>p\<esc>$bvey	a get\<esc>pblll~A() { return \<esc>pa; }\<esc>j"
	"aid in formatting comments
		"// -- assumes '//' has characters before it
		"# -- assumes '#' has no characters before it
		"/**/ -- fix formatting after pasting inside it
c cpp h java		++ let @f="0f/lli  \<esc>Vgq"
python perl make	++ let @f="0li  \<esc>Vgq"
c cpp h java		++ let @e="0i * \<esc>j"

"abbreviations
java ++ iabbr sysout System.out.print(
java ++ iabbr sysoutl System.out.println(
java ++ iabbr sysoutf System.out.printf(

"auto formatting
python sh pl	++ setlocal formatoptions+=or
yacc haskell	++ setlocal autoindent

"changing filetypes
php		++ let b:filetype_2 = "xhtml"
xhtml	++ let b:filetype_2 = "php"

