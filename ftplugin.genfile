" vim: filetype=vim

" ----------------------------------------------------------------------------
" all non-comment lines should be preceded by "[filetype list]\s*++\s*"
" ----------------------------------------------------------------------------


"indent
"--- 2 ---
clips               ++ setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
css                 ++ setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
context             ++ setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
elm                 ++ setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
htm html            ++ setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
javascript          ++ setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
jess                ++ setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
lsp lisp            ++ setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
scheme              ++ setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
tex                 ++ setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
xhtml               ++ setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
xml                 ++ setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
"--- 3 ---
fortran             ++ setlocal expandtab shiftwidth=3 tabstop=3 softtabstop=3
rst                 ++ setlocal expandtab shiftwidth=3 tabstop=3 softtabstop=3
"--- 4 ---
ada                 ++ setlocal expandtab shiftwidth=4 tabstop=4 softtabstop=4
asm                 ++ setlocal expandtab shiftwidth=4 tabstop=4 softtabstop=4
c                   ++ setlocal expandtab shiftwidth=4 tabstop=4 softtabstop=4
cpp                 ++ setlocal expandtab shiftwidth=4 tabstop=4 softtabstop=4
h                   ++ setlocal expandtab shiftwidth=4 tabstop=4 softtabstop=4
haskell             ++ setlocal expandtab shiftwidth=4 tabstop=4 softtabstop=4
java                ++ setlocal expandtab shiftwidth=4 tabstop=4 softtabstop=4
markdown            ++ setlocal expandtab shiftwidth=4 tabstop=4 softtabstop=4
matlab              ++ setlocal expandtab shiftwidth=4 tabstop=4 softtabstop=4
perl                ++ setlocal expandtab shiftwidth=4 tabstop=4 softtabstop=4
php                 ++ setlocal expandtab shiftwidth=4 tabstop=4 softtabstop=4
python              ++ setlocal expandtab shiftwidth=4 tabstop=4 softtabstop=4
remind              ++ setlocal expandtab shiftwidth=4 tabstop=4 softtabstop=4
vim                 ++ setlocal expandtab shiftwidth=4 tabstop=4 softtabstop=4

"display & folding
c cpp       ++ RainbowLoad
text        ++ setlocal linebreak
java        ++ setlocal include=^#\s*import
java        ++ setlocal includeexpr=substitute(v:fname,'\\.','/','g')
java        ++ setlocal foldmethod=indent
python      ++ setlocal foldmethod=indent
nasm        ++ setlocal textwidth=139
nasm        ++ setlocal comments=n:;,:;
nasm        ++ setlocal formatoptions+=ro
remind      ++ setlocal comments^=:;
remind      ++ setlocal foldmethod=marker
remind      ++ syn match remindComment ";.*$"
remind      ++ syn keyword remindExpiry THROUGH
tex         ++ syn match texZone "\\begin{lstlisting}\_.\{-}\\end{lstlisting}"
tex         ++ syn match texZone "\\lstinline{.\{-}}"
tex         ++ syn match texZone "\\url{.\{-}}"
tex context ++ source $VIMRUNTIME/ftplugin/tex.vim
tex context ++ setlocal autoindent
tex context ++ setlocal comments=n:%,:%
tex context ++ setlocal formatoptions+=ro
elm         ++ setlocal autoindent

"movement
text ++ nnoremap j gj
text ++ nnoremap k gk
text ++ vnoremap j gj
text ++ vnoremap k gk
text ++ nnoremap <Down> gj
text ++ nnoremap <Up> gk
text ++ vnoremap <Down> gj
text ++ vnoremap <Up> gk
text ++ inoremap <Down> <C-o>gj
text ++ inoremap <Up> <C-o>gk

"macros
    "(un)comment code
c cpp java javascript ++ map <c-c>   :call<space>Comment('// ', '')<cr>
c cpp java javascript ++ map <c-u> :call<space>UnComment('// ', '')<cr>
css php               ++ map <c-c>   :call<space>Comment('/\* ', ' \*/')<cr>
css php               ++ map <c-u> :call<space>UnComment('/\* ', ' \*/')<cr>
vim                   ++ map <c-c>   :call<space>Comment('" ', '')<cr>
vim                   ++ map <c-u> :call<space>UnComment('" ', '')<cr>
fortran               ++ map <c-c>   :call<space>Comment('c', '')<cr>
fortran               ++ map <c-u> :call<space>UnComment('c', '')<cr>
ada haskell elm       ++ map <c-c>   :call<space>Comment('-- ', '')<cr>
ada haskell elm       ++ map <c-u> :call<space>UnComment('-- ', '')<cr>
rst                   ++ map <c-c>   :call<space>Comment('.. # ', '')<cr>
rst                   ++ map <c-u> :call<space>UnComment('.. # ', '')<cr>
context tex matlab    ++ map <c-c>   :call<space>Comment('% ', '')<cr>
context tex matlab    ++ map <c-u> :call<space>UnComment('% ', '')<cr>
lsp lisp scheme clips jess remind nasm  ++ map <c-c>   :call<space>Comment('; ', '')<cr>
lsp lisp scheme clips jess remind nasm  ++ map <c-u> :call<space>UnComment('; ', '')<cr>
python perl sh make         ++ map <c-c>   :call<space>Comment('# ', '')<cr>
python perl sh make         ++ map <c-u> :call<space>UnComment('# ', '')<cr>
htm html xhtml xml markdown ++ map <c-c>   :call<space>Comment('<!-- ', ' -->')<cr>
htm html xhtml xml markdown ++ map <c-u> :call<space>UnComment('<!-- ', ' -->')<cr>
    "generate code
        "@t = to help test functions
        "@p = function prototypes (position cursor at bottom of file)
        "@g = get functions (very basic..)
lsp lisp ++ let @t="0v$hyi(format t \"~A~%~A~%\" \"\<esc>pa\" \<esc>A)\<esc>j"
c cpp   ++ let @p="[[kVy1GPA;\<esc>\<c-o>"
java    ++ let @g="$F F lvf hy}Opublic \<esc>p\<esc>$bvey a get\<esc>pblll~A() { return \<esc>pa; }\<esc>j"
    "aid in formatting comments
        "// -- assumes '//' has characters before it
        "# -- assumes '#' has no characters before it
        "/**/ -- fix formatting after pasting inside it
c cpp h java        ++ let @f="0f/lli  \<esc>Vgq"
python perl make    ++ let @f="0li  \<esc>Vgq"
c cpp h java        ++ let @e="0i * \<esc>j"

"abbreviations
java ++ iabbr sysout System.out.print(
java ++ iabbr sysoutl System.out.println(
java ++ iabbr sysoutf System.out.printf(

"auto formatting
python sh pl            ++ setlocal formatoptions+=or
yacc haskell markdown   ++ setlocal autoindent

"changing filetypes
php     ++ let b:filetype_2 = "xhtml"
xhtml   ++ let b:filetype_2 = "php"

