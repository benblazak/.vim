" vim: filetype=vim

" ben blazak -- 2008-02-05
" $Id: ftplugin.genfile,v 1.23 2009-09-26 03:21:15 ben Exp $

" ----------------------------------------------------------------------------
" all non-comment lines should be preceded by "[filetype list]\s*++\s*"
" ----------------------------------------------------------------------------


"indent
lsp lisp htm html xhtml xml			++ setlocal noexpandtab
lsp lisp htm html xhtml xml			++ setlocal shiftwidth=2
lsp lisp htm html xhtml xml			++ setlocal tabstop=2
python perl java css vim ada php	++ setlocal noexpandtab
python perl java css vim ada php	++ setlocal shiftwidth=4
python perl java css vim ada php	++ setlocal tabstop=4
c cpp h							++ setlocal noexpandtab
c cpp h							++ setlocal shiftwidth=8
c cpp h							++ setlocal tabstop=8
fortran rst						++ setlocal expandtab
fortran rst						++ setlocal shiftwidth=3
fortran rst						++ setlocal softtabstop=3


"display & folding
text ++ setlocal linebreak
java ++ setlocal include=^#\s*import
java ++ setlocal includeexpr=substitute(v:fname,'\\.','/','g')
java ++ setlocal foldmethod=indent

"movement
text ++ nnoremap j gj
text ++ nnoremap k gk
text ++ vnoremap j gj
text ++ vnoremap k gk
text ++ nnoremap <Down> gj
text ++ nnoremap <Up> gk
text ++ vnoremap <Down> gj
text ++ vnoremap <Up> gk
text ++ inoremap <Down> <C-o>gj
text ++ inoremap <Up> <C-o>gk

"macros
	"(un)comment code
c cpp java	++ map <c-c>   :call<space>Comment('// ', '')<cr>
c cpp java	++ map <c-u> :call<space>UnComment('// ', '')<cr>
lsp lisp	++ map <c-c>   :call<space>Comment('; ', '')<cr>
lsp lisp	++ map <c-u> :call<space>UnComment('; ', '')<cr>
css php		++ map <c-c>   :call<space>Comment('/\* ', ' \*/')<cr>
css php		++ map <c-u> :call<space>UnComment('/\* ', ' \*/')<cr>
vim			++ map <c-c>   :call<space>Comment('" ', '')<cr>
vim			++ map <c-u> :call<space>UnComment('" ', '')<cr>
fortran		++ map <c-c>   :call<space>Comment('c', '')<cr>
fortran		++ map <c-u> :call<space>UnComment('c', '')<cr>
ada			++ map <c-c>   :call<space>Comment('-- ', '')<cr>
ada			++ map <c-u> :call<space>UnComment('-- ', '')<cr>
rst			++ map <c-c>   :call<space>Comment('.. # ', '')<cr>
rst			++ map <c-u> :call<space>UnComment('.. # ', '')<cr>
python perl sh make	++ map <c-c>   :call<space>Comment('# ', '')<cr>
python perl sh make	++ map <c-u> :call<space>UnComment('# ', '')<cr>
htm html xhtml xml	++ map <c-c>   :call<space>Comment('<!-- ', ' -->')<cr>
htm html xhtml xml	++ map <c-u> :call<space>UnComment('<!-- ', ' -->')<cr>
	"generate code
		"@t = to help test functions
		"@p = function prototypes (position cursor at bottom of file)
		"@g = get functions (very basic..)
lsp lisp ++ let @t="0v$hyi(format t \"~A~%~A~%\" \"\<esc>pa\" \<esc>A)\<esc>j"
c cpp 	++ let @p="[[kVy1GPA;\<esc>\<c-o>"
java	++ let @g="$F F lvf hy}Opublic \<esc>p\<esc>$bvey	a get\<esc>pblll~A() { return \<esc>pa; }\<esc>j"
	"aid in formatting comments
		"// -- assumes '//' has characters before it
		"# -- assumes '#' has no characters before it
		"/**/ -- fix formatting after pasting inside it
c cpp h java		++ let @f="0f/lli  \<esc>Vgq"
python perl make	++ let @f="0li  \<esc>Vgq"
c cpp h java		++ let @e="0i * \<esc>j"
	"misc
rst ++ imap **h <esc>xo<esc>pa**l<bs><esc>khljlDo

"abbreviations
java ++ iabbr sysout System.out.print(
java ++ iabbr sysoutl System.out.println(
java ++ iabbr sysoutf System.out.printf(

"auto formatting
python sh ++ setlocal formatoptions+=or

"changing filetypes
php		++ let b:filetype_2 = "xhtml"
xhtml	++ let b:filetype_2 = "php"

